import numpy as np 
import pandas as pd
import matplotlib.pyplot as plt
import requests
import io

# Function to download and load CSV files
def load_csv_from_github(url):
    response = requests.get(url)
    if response.status_code == 200:
        # Read the CSV from the content
        return pd.read_csv(io.StringIO(response.text), header=None).values
    else:
        raise Exception(f"Failed to download file from {url}, status code: {response.status_code}")
        
# Load the bands
red_band = load_csv_from_github("https://raw.githubusercontent.com/bcunningham40/SS1100_FinalProject_Group4/refs/heads/main/Payload/red.csv")
green_band = load_csv_from_github('https://raw.githubusercontent.com/bcunningham40/SS1100_FinalProject_Group4/refs/heads/main/Payload/green.csv')
blue_band = load_csv_from_github('https://raw.githubusercontent.com/bcunningham40/SS1100_FinalProject_Group4/refs/heads/main/Payload/blue.csv')

# Replace 'not a number' with a specific value (adapted from ChatGPT recommendation for correcting all while image)
red_band = np.nan_to_num(red_band, nan=0)
green_band = np.nan_to_num(green_band, nan=0)
blue_band = np.nan_to_num(blue_band, nan=0)

def visualize_rgb_bands(red_csv, green_csv, blue_csv):
    """Process R, G, and B band CSV files and visualize a single RGB image."""
   
    # Ensure that all bands have the same dimensions
    if not (red_band.shape == green_band.shape == blue_band.shape):
        raise ValueError("All bands must have the same dimensions.")

    # Combine the bands into a single RGB image
    rgb_image = np.stack((red_band, green_band, blue_band), axis=-1)

    # Normalize the data for visualization (assuming radiance values are not in 0-255 range)
    rgb_image_normalized = (rgb_image - rgb_image.min()) / (rgb_image.max() - rgb_image.min())
    rgb_image_normalized = np.clip(rgb_image_normalized, 0, 1)  # Ensure the values are within [0, 1]

    # Visualize the RGB image
    plt.figure(figsize=(10, 10))  # Increased figure size for better visualization
    plt.imshow(rgb_image_normalized)
    plt.title("RGB Image", fontsize=16)
    plt.axis('off')  # Turn off axes for a cleaner look
    plt.tight_layout()
    plt.show()

# Test usage and import of R G B files
visualize_rgb_bands(red_band, green_band, blue_band)
